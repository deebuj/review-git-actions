name: Deploy Application

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Deploy version"
        required: true
        default: "1.0.0"
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create deployment package
        run: |
          zip -r deployment.zip . -x "*.git*" ".github/*"
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment.zip

  deploy-to-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
      
      - name: Verify deployment package
        run: |
          echo "Verifying deployment package exists..."
          if [ -f "deployment.zip" ]; then
            echo "deployment.zip found successfully"
          else
            echo "deployment.zip not found"
            exit 1
          fi
          echo "Deploying version ${{ github.event.inputs.version }} to staging"
          # Add your deployment script here

      - name: Log staging deployment
        uses: ./.github/actions/update-wiki
        with:
          environment: staging
          run_number: ${{ github.run_number }}
          actor: ${{ github.actor }}
          version: ${{ github.event.inputs.version }}
          token: ${{ secrets.WIKI_TOKEN }}

  deploy-to-production:
    runs-on: ubuntu-latest
    environment: production
    needs: deploy-to-staging
    env:
      APPROVED_DEPLOYERS: "deebuj,test" 
    steps:
      - name: Check deployer authorization
        run: |
          echo "Checking if ${{ github.actor }} is authorized to deploy to production..."
          if [[ ! ",${{ env.APPROVED_DEPLOYERS }}," == *",${{ github.actor }},"* ]]; then
            echo "Error: ${{ github.actor }} is not authorized to deploy to production"
            echo "Approved deployers: ${{ env.APPROVED_DEPLOYERS }}"
            exit 1
          fi
          echo "${{ github.actor }} is authorized to deploy to production"

      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Verify version matches latest release tag
        run: |
          # Get latest release tag from GitHub API
          LATEST_TAG=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" \
            | jq -r .tag_name)
          
          # Remove 'v' prefix if present
          LATEST_VERSION=${LATEST_TAG#v}
          
          echo "Latest release tag: $LATEST_TAG"
          echo "Input version: ${{ inputs.version }}"
          
          if [ "$LATEST_VERSION" != "${{ inputs.version }}" ]; then
            echo "Error: Input version (${{ inputs.version }}) does not match latest release version ($LATEST_VERSION)"
            exit 1
          fi

      - name: Verify deployment package
        run: |
          echo "Verifying deployment package exists..."
          if [ -f "deployment.zip" ]; then
            echo "deployment.zip found successfully"
          else
            echo "deployment.zip not found"
            exit 1
          fi
          echo "Deploying version ${{ github.event.inputs.version }} to production"
          # Add your deployment script here

      - name: Log production deployment
        uses: ./.github/actions/update-wiki
        with:
          environment: production
          run_number: ${{ github.run_number }}
          actor: ${{ github.actor }}
          version: ${{ github.event.inputs.version }}
          token: ${{ secrets.WIKI_TOKEN }}



